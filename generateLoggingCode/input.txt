void logAuthentication(Client *client, StringData mechanism, const UserName &user, ErrorCodes::Error result)
void logCommandAuthzCheck(Client *client, const OpMsgRequest &cmdObj, const audit::CommandInterface &command, ErrorCodes::Error result)
void logDeleteAuthzCheck(Client *client, const NamespaceString &ns, const BSONObj &pattern, ErrorCodes::Error result)
void logGetMoreAuthzCheck(Client *client, const NamespaceString &ns, long long cursorId, ErrorCodes::Error result)
void logInsertAuthzCheck(Client *client, const NamespaceString &ns, const BSONObj &insertedObj, ErrorCodes::Error result)
void logKillCursorsAuthzCheck(Client *client, const NamespaceString &ns, long long cursorId, ErrorCodes::Error result)
void logQueryAuthzCheck(Client *client, const NamespaceString &ns, const BSONObj &query, ErrorCodes::Error result)
void logUpdateAuthzCheck(Client *client, const NamespaceString &ns, const BSONObj &query, const BSONObj &updateObj, bool isUpsert, bool isMulti, ErrorCodes::Error result)
void logCreateUser(Client *client, const UserName &username, bool password, const BSONObj *customData, const std::vector <RoleName> &roles, const boost::optional <BSONArray> &restrictions)
void logDropUser(Client *client, const UserName &username)
void logDropAllUsersFromDatabase(Client *client, StringData dbname)
void logUpdateUser(Client *client, const UserName &username, bool password, const BSONObj *customData, const std::vector <RoleName> *roles, const boost::optional <BSONArray> &restrictions)
void logGrantRolesToUser(Client *client, const UserName &username, const std::vector <RoleName> &roles)
void logRevokeRolesFromUser(Client *client, const UserName &username, const std::vector <RoleName> &roles)
void logCreateRole(Client *client, const RoleName &role, const std::vector <RoleName> &roles, const PrivilegeVector &privileges, const boost::optional <BSONArray> &restrictions)
void logUpdateRole(Client *client, const RoleName &role, const std::vector <RoleName> *roles, const PrivilegeVector *privileges, const boost::optional <BSONArray> &restrictions)
void logDropRole(Client *client, const RoleName &role)
void logDropAllRolesFromDatabase(Client *client, StringData dbname)
void logGrantRolesToRole(Client *client, const RoleName &role, const std::vector <RoleName> &roles)
void logRevokeRolesFromRole(Client *client, const RoleName &role, const std::vector <RoleName> &roles)
void logGrantPrivilegesToRole(Client *client, const RoleName &role, const PrivilegeVector &privileges)
void logRevokePrivilegesFromRole(Client *client, const RoleName &role, const PrivilegeVector &privileges)
void logReplSetReconfig(Client *client, const BSONObj *oldConfig, const BSONObj *newConfig)
void logApplicationMessage(Client *client, StringData msg)
void logShutdown(Client *client)
void logCreateIndex(Client *client, const BSONObj *indexSpec, StringData indexname, StringData nsname)
void logCreateCollection(Client *client, StringData nsname)
void logCreateDatabase(Client *client, StringData dbname)
void logDropIndex(Client *client, StringData indexname, StringData nsname)
void logDropCollection(Client *client, StringData nsname)
void logDropDatabase(Client *client, StringData dbname)
void logRenameCollection(Client *client, StringData source, StringData target)
void logEnableSharding(Client *client, StringData dbname)
void logAddShard(Client *client, StringData name, const std::string &servers, long long maxSize)
void logRemoveShard(Client *client, StringData shardname)
void logShardCollection(Client *client, StringData ns, const BSONObj &keyPattern, bool unique)
void writeImpersonatedUsersToMetadata(OperationContext *opCtx, BSONObjBuilder *metadata)